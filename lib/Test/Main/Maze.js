"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MazeBuilder_1 = require("../../MazeBuilder");
var Maze_1 = require("../../Maze");
var Compass4_1 = require("../../Behavior/Compass4");
var chai_1 = require("chai");
require("mocha");
var MazeNode_1 = require("../../MazeNode");
var NodeLocation2D_1 = require("../../MazeCoordinates/NodeLocation2D");
describe('Maze', function () {
    var m = new Maze_1.Maze();
    it('allows CardinalityBehavior to be set and reported on the Maze', function () {
        m = new Maze_1.Maze();
        m.setCardinalityBehavior(new Compass4_1.Compass4());
        chai_1.expect(m.getCardinalityBehavior()).to.be.instanceOf(Compass4_1.Compass4);
    });
    it('can be assigned a node dictionary, and it can report the dictionary back to a caller', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var b = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var c = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var d = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var e = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var nodeCollection = {};
        var capturedNodeCollection;
        a.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 1]));
        b.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 2]));
        c.setCoordinates(new NodeLocation2D_1.NodeLocation2D([2, 1]));
        d.setCoordinates(new NodeLocation2D_1.NodeLocation2D([2, 0]));
        e.setCoordinates(new NodeLocation2D_1.NodeLocation2D([0, 1]));
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        nodeCollection[c.getCoordinates().toString()] = c;
        nodeCollection[d.getCoordinates().toString()] = d;
        nodeCollection[e.getCoordinates().toString()] = e;
        m.setNodes(nodeCollection);
        capturedNodeCollection = m.getNodes();
        chai_1.expect(capturedNodeCollection[a.getCoordinates().toString()]).to.be.equal(a);
        chai_1.expect(capturedNodeCollection[b.getCoordinates().toString()]).to.be.equal(b);
        chai_1.expect(capturedNodeCollection[c.getCoordinates().toString()]).to.be.equal(c);
        chai_1.expect(capturedNodeCollection[d.getCoordinates().toString()]).to.be.equal(d);
        chai_1.expect(capturedNodeCollection[e.getCoordinates().toString()]).to.be.equal(e);
    });
    it('can return nodes residing at the indicated coordinates', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var b = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var nodeCollection = {};
        a.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 1]));
        b.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 2]));
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        m.setNodes(nodeCollection);
        chai_1.expect(m.getNode(new NodeLocation2D_1.NodeLocation2D([1, 2]))).to.be.equal(b);
    });
    it('facilitates definition of "starting" and "ending" nodes', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var b = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var c = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var nodeCollection = {};
        a.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 1]));
        b.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 2]));
        c.setCoordinates(new NodeLocation2D_1.NodeLocation2D([2, 1]));
        m.setStartNode(a);
        m.setFinishNode(c);
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        nodeCollection[c.getCoordinates().toString()] = c;
        m.setNodes(nodeCollection);
        chai_1.expect(m.getStartNode()).to.be.equal(a);
        chai_1.expect(m.getFinishNode()).to.be.equal(c);
    });
    it('it should have accurate setters and getters for dimensional size', function () {
        m = new Maze_1.Maze();
        var size;
        m.setDimensions([4, 3]);
        size = m.getDimensions();
        chai_1.expect(size[0]).to.be.equal(4);
        chai_1.expect(size[1]).to.be.equal(3);
    });
    it('it should report on the current amount of nodes included in the maze', function () {
        var mb = new MazeBuilder_1.MazeBuilder();
        var maze = mb.buildMaze();
        var contents = maze.getNodes();
        chai_1.expect(maze.getSize()).to.be.equal(Object.keys(contents).length);
    });
    it('has a working getter/setter for the current node pointer', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var b = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var c = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var nodeCollection = {};
        a.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 1]));
        b.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 2]));
        c.setCoordinates(new NodeLocation2D_1.NodeLocation2D([2, 1]));
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        nodeCollection[c.getCoordinates().toString()] = c;
        m.setNodes(nodeCollection);
        m.setCurrentNode(b);
        chai_1.expect(m.getCurrentNode()).to.be.equal(b);
    });
    it('facilitates traversal through cardinal movement', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var b = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var c = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var d = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var e = new MazeNode_1.MazeNode(new Compass4_1.Compass4());
        var nodeCollection = {};
        a.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 1])).setName("A");
        b.setCoordinates(new NodeLocation2D_1.NodeLocation2D([1, 2])).setName("B");
        c.setCoordinates(new NodeLocation2D_1.NodeLocation2D([2, 1])).setName("C");
        d.setCoordinates(new NodeLocation2D_1.NodeLocation2D([2, 0])).setName("D");
        e.setCoordinates(new NodeLocation2D_1.NodeLocation2D([0, 1])).setName("E");
        a.connectTo(e, Compass4_1.C4.N);
        a.connectTo(c, Compass4_1.C4.E);
        a.connectTo(b, Compass4_1.C4.S);
        b.connectTo(d, Compass4_1.C4.W);
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        nodeCollection[c.getCoordinates().toString()] = c;
        nodeCollection[d.getCoordinates().toString()] = d;
        nodeCollection[e.getCoordinates().toString()] = e;
        m.setNodes(nodeCollection);
        m.setCurrentNode(a);
        chai_1.expect(m.move(Compass4_1.C4.N)).to.be.equal(e);
        chai_1.expect(m.move(Compass4_1.C4.S)).to.be.equal(a);
        chai_1.expect(m.move(Compass4_1.C4.E)).to.be.equal(c);
        chai_1.expect(m.move(Compass4_1.C4.W)).to.be.equal(a);
        chai_1.expect(m.move(Compass4_1.C4.S)).to.be.equal(b);
        chai_1.expect(m.move(Compass4_1.C4.W)).to.be.equal(d);
    });
});
