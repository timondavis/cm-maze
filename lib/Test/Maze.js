"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Maze_1 = require("../Maze");
var CardinalityBehaviorFour2D_1 = require("../Behavior/CardinalityBehaviorFour2D");
var chai_1 = require("chai");
require("mocha");
var MazeNode_1 = require("../MazeNode");
var MazeCoordinates2D_1 = require("../MazeCoordinates/MazeCoordinates2D");
describe('Maze', function () {
    var m = new Maze_1.Maze();
    it('allows CardinalityBehavior to be set and reported on the Maze', function () {
        m = new Maze_1.Maze();
        m.setCardinalityBehavior(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        chai_1.expect(m.getCardinalityBehavior()).to.be.instanceOf(CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D);
    });
    it('can be assigned a node dictionary, and it can report the dictionary back to a caller', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var b = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var c = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var d = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var e = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var nodeCollection = {};
        var capturedNodeCollection;
        a.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([1, 1]));
        b.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([1, 2]));
        c.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([2, 1]));
        d.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([2, 0]));
        e.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([0, 1]));
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        nodeCollection[c.getCoordinates().toString()] = c;
        nodeCollection[d.getCoordinates().toString()] = d;
        nodeCollection[e.getCoordinates().toString()] = e;
        m.setNodes(nodeCollection);
        capturedNodeCollection = m.getNodes();
        chai_1.expect(capturedNodeCollection[a.getCoordinates().toString()]).to.be.equal(a);
        chai_1.expect(capturedNodeCollection[b.getCoordinates().toString()]).to.be.equal(b);
        chai_1.expect(capturedNodeCollection[c.getCoordinates().toString()]).to.be.equal(c);
        chai_1.expect(capturedNodeCollection[d.getCoordinates().toString()]).to.be.equal(d);
        chai_1.expect(capturedNodeCollection[e.getCoordinates().toString()]).to.be.equal(e);
    });
    it('can return nodes residing at the indicated coordinates', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var b = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var nodeCollection = {};
        a.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([1, 1]));
        b.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([1, 2]));
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        m.setNodes(nodeCollection);
        chai_1.expect(m.getNode(new MazeCoordinates2D_1.MazeCoordinates2D([1, 2]))).to.be.equal(b);
    });
    it('facilitates definition of "starting" and "ending" nodes', function () {
        m = new Maze_1.Maze();
        var a = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var b = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var c = new MazeNode_1.MazeNode(new CardinalityBehaviorFour2D_1.CardinalityBehaviorFour2D());
        var nodeCollection = {};
        a.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([1, 1]));
        b.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([1, 2]));
        c.setCoordinates(new MazeCoordinates2D_1.MazeCoordinates2D([2, 1]));
        m.setStartNode(a);
        m.setFinishNode(c);
        nodeCollection[a.getCoordinates().toString()] = a;
        nodeCollection[b.getCoordinates().toString()] = b;
        nodeCollection[c.getCoordinates().toString()] = c;
        m.setNodes(nodeCollection);
        chai_1.expect(m.getStartNode()).to.be.equal(a);
        chai_1.expect(m.getFinishNode()).to.be.equal(c);
    });
});
